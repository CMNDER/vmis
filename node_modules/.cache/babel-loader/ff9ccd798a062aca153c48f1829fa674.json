{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/samuel/vmis-1/src/Pages/AcknowledgeDistribution.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { Card } from 'react-bootstrap';\nimport { useInput } from '../Data/useInput';\n\nconst DistributionList = props => {\n  _s();\n\n  const [message, setMessage] = useState(null);\n  const [getDistributions, setGetDistributions] = useState(null);\n  const {\n    value: damageType,\n    bind: bindDamageType,\n    reset: resetDamageType\n  } = useInput('');\n  const {\n    value: quantity,\n    bind: bindQuantity,\n    reset: resetQuantity\n  } = useInput('');\n  const {\n    value: comment,\n    bind: bindComment,\n    reset: resetComment\n  } = useInput('');\n  const {\n    value: pcv,\n    bind: bindPcv,\n    reset: resetPcv\n  } = useInput('');\n  const [acknowledgementList, acknowledgememt] = [[]];\n  useEffect(() => {\n    axios.get('http://localhost:8765/api/distribution/acknowledge').then(results => {\n      setGetDistributions(results.data);\n    }).catch(() => setMessage({\n      type: 'text-center alert alert-success m-2',\n      message: 'No acknowledgememt list'\n    }));\n  }, [props.message]);\n\n  const handleAcknowledgmentList = e => {\n    e.preventDefault();\n\n    if (constraintCheck(acknowledgementList, selectedVaccine.vaccineId, quantity)) {\n      acknowledgementList = constraintCheck(acknowledgementList, selectedVaccine.vaccineId, quantity);\n    } else {\n      acknowledgementList.push({\n        \"vaccineid\": selectedVaccine.vaccineId,\n        \"vaccineName\": selectedVaccine.vaccineName,\n        \"batchNumber\": batchNumber,\n        \"pcvStatus\": pcv,\n        \"vaccineQuantity\": quantity,\n        \"comment\": comment\n      });\n    }\n\n    setSelectedVaccine('');\n    resetVaccineSelector.value = \"\";\n    resetQuantity();\n    resetBatchNumber();\n    resetPcv();\n    resetComment();\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: getDistributions ? /*#__PURE__*/_jsxDEV(Card, {\n      children: /*#__PURE__*/_jsxDEV(Card.Body, {\n        children: \"Hi there\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"alert alert-info\",\n      children: \"nothing to acknowledge\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 23\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 13\n  }, this);\n};\n\n_s(DistributionList, \"Poukfx0Rc4MRwAcv9BtyPuO83PU=\", false, function () {\n  return [useInput, useInput, useInput, useInput];\n});\n\n_c = DistributionList;\nexport default DistributionList;\n\nvar _c;\n\n$RefreshReg$(_c, \"DistributionList\");","map":{"version":3,"sources":["/home/samuel/vmis-1/src/Pages/AcknowledgeDistribution.js"],"names":["React","useEffect","useState","axios","Card","useInput","DistributionList","props","message","setMessage","getDistributions","setGetDistributions","value","damageType","bind","bindDamageType","reset","resetDamageType","quantity","bindQuantity","resetQuantity","comment","bindComment","resetComment","pcv","bindPcv","resetPcv","acknowledgementList","acknowledgememt","get","then","results","data","catch","type","handleAcknowledgmentList","e","preventDefault","constraintCheck","selectedVaccine","vaccineId","push","vaccineName","batchNumber","setSelectedVaccine","resetVaccineSelector","resetBatchNumber"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,QAAqB,iBAArB;AACA,SAASC,QAAT,QAAyB,kBAAzB;;AACA,MAAMC,gBAAgB,GAAIC,KAAD,IAAW;AAAA;;AAChC,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBP,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM,CAACQ,gBAAD,EAAmBC,mBAAnB,IAA0CT,QAAQ,CAAC,IAAD,CAAxD;AACA,QAAM;AAAEU,IAAAA,KAAK,EAAEC,UAAT;AAAqBC,IAAAA,IAAI,EAAEC,cAA3B;AAA2CC,IAAAA,KAAK,EAAEC;AAAlD,MAAsEZ,QAAQ,CAAC,EAAD,CAApF;AACA,QAAM;AAAEO,IAAAA,KAAK,EAAEM,QAAT;AAAmBJ,IAAAA,IAAI,EAAEK,YAAzB;AAAuCH,IAAAA,KAAK,EAAEI;AAA9C,MAAgEf,QAAQ,CAAC,EAAD,CAA9E;AACA,QAAM;AAAEO,IAAAA,KAAK,EAAES,OAAT;AAAkBP,IAAAA,IAAI,EAAEQ,WAAxB;AAAqCN,IAAAA,KAAK,EAAEO;AAA5C,MAA6DlB,QAAQ,CAAC,EAAD,CAA3E;AACA,QAAM;AAAEO,IAAAA,KAAK,EAAEY,GAAT;AAAcV,IAAAA,IAAI,EAAEW,OAApB;AAA6BT,IAAAA,KAAK,EAAEU;AAApC,MAAiDrB,QAAQ,CAAC,EAAD,CAA/D;AACA,QAAM,CAACsB,mBAAD,EAAsBC,eAAtB,IAAyC,CAAC,EAAD,CAA/C;AACA3B,EAAAA,SAAS,CAAC,MAAM;AACZE,IAAAA,KAAK,CAAC0B,GAAN,CAAU,oDAAV,EAAgEC,IAAhE,CAAqEC,OAAO,IAAI;AAC5EpB,MAAAA,mBAAmB,CAACoB,OAAO,CAACC,IAAT,CAAnB;AACH,KAFD,EAEGC,KAFH,CAES,MACLxB,UAAU,CAAC;AAAEyB,MAAAA,IAAI,EAAE,qCAAR;AAA+C1B,MAAAA,OAAO,EAAE;AAAxD,KAAD,CAHd;AAKH,GANQ,EAMN,CAACD,KAAK,CAACC,OAAP,CANM,CAAT;;AAOA,QAAM2B,wBAAwB,GAAIC,CAAD,IAAO;AACpCA,IAAAA,CAAC,CAACC,cAAF;;AACA,QAAIC,eAAe,CAACX,mBAAD,EAAsBY,eAAe,CAACC,SAAtC,EAAiDtB,QAAjD,CAAnB,EAA+E;AAC3ES,MAAAA,mBAAmB,GAAGW,eAAe,CAACX,mBAAD,EAAsBY,eAAe,CAACC,SAAtC,EAAiDtB,QAAjD,CAArC;AACH,KAFD,MAGK;AACDS,MAAAA,mBAAmB,CAACc,IAApB,CAAyB;AACrB,qBAAaF,eAAe,CAACC,SADR;AAErB,uBAAeD,eAAe,CAACG,WAFV;AAGrB,uBAAeC,WAHM;AAIrB,qBAAanB,GAJQ;AAKrB,2BAAmBN,QALE;AAMrB,mBAAWG;AANU,OAAzB;AAQH;;AACDuB,IAAAA,kBAAkB,CAAC,EAAD,CAAlB;AACAC,IAAAA,oBAAoB,CAACjC,KAArB,GAA6B,EAA7B;AACAQ,IAAAA,aAAa;AACb0B,IAAAA,gBAAgB;AAChBpB,IAAAA,QAAQ;AACRH,IAAAA,YAAY;AACf,GArBD;;AAsBA,sBAAQ;AAAA,cACHb,gBAAgB,gBACb,QAAC,IAAD;AAAA,6BACI,QAAC,IAAD,CAAM,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADa,gBAKH;AAAK,MAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AANV;AAAA;AAAA;AAAA;AAAA,UAAR;AAQH,CA7CD;;GAAMJ,gB;UAG0ED,Q,EACNA,Q,EACHA,Q,EACZA,Q;;;KANrDC,gB;AA+CN,eAAeA,gBAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { Card } from 'react-bootstrap';\nimport { useInput } from '../Data/useInput';\nconst DistributionList = (props) => {\n    const [message, setMessage] = useState(null)\n    const [getDistributions, setGetDistributions] = useState(null)\n    const { value: damageType, bind: bindDamageType, reset: resetDamageType } = useInput('');\n    const { value: quantity, bind: bindQuantity, reset: resetQuantity } = useInput('');\n    const { value: comment, bind: bindComment, reset: resetComment } = useInput('');\n    const { value: pcv, bind: bindPcv, reset: resetPcv } = useInput('');\n    const [acknowledgementList, acknowledgememt] = [[],]\n    useEffect(() => {\n        axios.get('http://localhost:8765/api/distribution/acknowledge').then(results => {\n            setGetDistributions(results.data)\n        }).catch(() =>\n            setMessage({ type: 'text-center alert alert-success m-2', message: 'No acknowledgememt list' })\n        )\n    }, [props.message])\n    const handleAcknowledgmentList = (e) => {\n        e.preventDefault()\n        if (constraintCheck(acknowledgementList, selectedVaccine.vaccineId, quantity)) {\n            acknowledgementList = constraintCheck(acknowledgementList, selectedVaccine.vaccineId, quantity)\n        }\n        else {\n            acknowledgementList.push({\n                \"vaccineid\": selectedVaccine.vaccineId,\n                \"vaccineName\": selectedVaccine.vaccineName,\n                \"batchNumber\": batchNumber,\n                \"pcvStatus\": pcv,\n                \"vaccineQuantity\": quantity,\n                \"comment\": comment\n            })\n        }\n        setSelectedVaccine('');\n        resetVaccineSelector.value = \"\"\n        resetQuantity()\n        resetBatchNumber()\n        resetPcv();\n        resetComment()\n    }\n    return (<div>\n        {getDistributions ?\n            <Card>\n                <Card.Body>\n                    Hi there\n            </Card.Body>\n            </Card> : <div className=\"alert alert-info\">nothing to acknowledge</div>}\n    </div>);\n}\n\nexport default DistributionList;"]},"metadata":{},"sourceType":"module"}